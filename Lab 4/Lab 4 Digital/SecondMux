library ieee; 
use ieee.std_logic_1164.all; 
use ieee.numeric_std.all; 
use ieee.std_logic_unsigned.all; 

--------------fastclock for sevensegment display------------- 

entity SecondMux is     
Port (
	port( 
	    clock              : in std_logic;
		 Clk1Hz             : in std_logic;
		 reset              : in std_logic;
       SoundAlarm         : in std_logic;
       SetLED0Off         : in std_logic;
       SetLED0On          : in std_logic;
       SetLed04Sec75Duty  : in std_logic;
       SsetLED2Sec50Duty  : in std_logic;
       Led1Out            : in std_logic;
		 InputSevenSegOne   : in std_logic_vector(6 DOWNTO 0);
		 InputSevenSegTwo   : in std_logic_vector(6 DOWNTO 0);
		 InputSevenSegThree : in std_logic_vector(6 DOWNTO 0);
       InputSevenSegFour  : in std_logic_vector(6 DOWNTO 0); 
		 OutputLED0         : out std_logic;
		 OutputLED1         : out std_logic;
		 OutputBuzzer       : out std_logic;
       OutputDisplay      : out std_logic_vector(3 downto 0);
  		 OutputSegments     : out std_logic_vector(6 DOWNTO 0)
		 );
		   
end SecondMux; 

architecture Behavioral of SecondMux is 
 
type     my_fms_display_states is (S0, S1, S2, S3);  
signal   present_state, next_state : my_fms_display_states;  
 
begin 
  
	P0: process(clock, reset)  
	begin   
		if(reset = '1') then    
			present_state <= S0;   
		elsif (clock='1' and clock'event) then    
			present_state <= next_state;   
		end if;  
	end process;   
 
	P1: process(present_state, OutputSegments)  
	begin   
		case present_state is    
				when  S0 =>          
								next_state <= S1;     
								OutputSegments<= InputSevenSegOne;     
								display <= "1000";    
				when S1 =>  
								next_state <= S2;  
								OutputSegments<= InputSevenSegTwo;     
								display <= "0100";    
				when S2 => 
								next_state <= S3; 
								OutputSegments<= InputSevenSegThree;     
								display <= "0010";    
				when S3 => 
								next_state <= S0; 
								OutputSegments<= InputSevenSegFour;     
								display <= "0001";    
 		end case;  
	end process;      

end Behavioral; 
  